# Datagenerator 

from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(
        rescale=1./255,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True)
        
val_datagen = ImageDataGenerator(rescale=1./255)

train_image_generator = train_datagen.flow_from_directory(
'C:/Users/David/Data3/train_frames/',
batch_size = 1) #NORMALLY 4/8/16/32

train_mask_generator = train_datagen.flow_from_directory('C:/Users/David/Data3/train_masks/',
batch_size = 1 )#NORMALLY 4/8/16/32

val_image_generator = val_datagen.flow_from_directory(
'C:/Users/David/Data3/val_frames/',
batch_size = 1 )#NORMALLY 4/8/16/32


val_mask_generator = val_datagen.flow_from_directory(
'C:/Users/David/Data3/val_masks/',
batch_size = 1 )#NORMALLY 4/8/16/32


train_generator = zip(train_image_generator, train_mask_generator)
val_generator = zip(val_image_generator, val_mask_generator)


# Shuffle/Augmentation

def data_gen(img_folder, mask_folder, batch_size):
  c = 0
  n = os.listdir(img_folder) #List of training images
  random.shuffle(n)
  
  while (True):
    img = np.zeros((batch_size, 320, 320, 3)).astype('float')
    mask = np.zeros((batch_size, 320, 320, 1)).astype('float')

    for i in range(c, c+batch_size): #initially from 0 to 16, c = 0. 

      train_img = cv2.imread(img_folder+'/'+n[i])/255.
      train_img =  cv2.resize(train_img, (256, 256))# Read an image from folder and resize
      
      img[i-c] = train_img #add to array - img[0], img[1], and so on.
                                                   

      train_mask = cv2.imread(mask_folder+'/'+n[i], cv2.IMREAD_GRAYSCALE)/255.
      train_mask = cv2.resize(train_mask, (256, 256))
      train_mask = train_mask.reshape(256, 256, 1) # Add extra dimension for parity with train_img size [512 * 512 * 3]

      mask[i-c] = train_mask

    c+=batch_size
    if(c+batch_size>=len(os.listdir(img_folder))):
      c=0
      random.shuffle(n)
                  # print "randomizing again"
    yield img, mask




train_frame_path = 'Data3\train_frames'
train_mask_path = 'David\Data3\train_masks'

val_frame_path = 'Users\David\Data3\val_frames'
val_mask_path = 'Users\David\Data3\val_masks'

# Train the model
train_gen = data_gen(train_frame_path,train_mask_path, batch_size = 1)
val_gen = data_gen(val_frame_path,val_mask_path, batch_size = 1)
